SPL.eventmanager={};SPL.eventmanager.EventManager=function(currentPlayerObj){console.log('EventManager created');var self=this;self.subscribers=[];var posCounter=0;self.singleEventList=["init","ready","initload","manifest","complete","ended"];self.eventCounter=[0,0,0,0,0,0];self.singleEventPlugin=["controller","adManager","analytics","comscore","GA"];self.name="EventManagerSELF_"+currentPlayerObj.currentCounter;this.on=function(subscriberName,callbackFunction,eventType){this.subscribe(subscriberName,callbackFunction,eventType);}
this.subscribe=function(subscriberName,callbackFunction,eventType){console.log('Event Subscriber here with subscriberName :: '+subscriberName+'  eventType :: '+eventType);var Obj={subscriberName:subscriberName,callbackFunction:callbackFunction,eventType:eventType}
self.subscribers.push(Obj);};self.unsubscribe=function(subscriberName){console.log('destroy Event unsubscribe:'+subscriberName);console.log('destroy self.subscribers ::',self.subscribers);deleteThisSubscriber(self.subscribers,subscriberName);}
self.dispatchEvent=function(name,type,data,isUserTriggerPlay){var subscribers=self.subscribers;var subscriberLength=subscribers.length;var eventName=name;eventType=type;eventData=data;for(var i=0;i<subscriberLength;i++){var subscriberName=subscribers[i].subscriberName;var registerEventType=subscribers[i].eventType;var callbackFunction=subscribers[i].callbackFunction;if(self.eventCounter[self.singleEventList.indexOf(eventName)]&&self.singleEventPlugin.indexOf(subscriberName)!=-1){return;}setTimeout(function(eventName,eventType,eventData,subscriberName,registerEventType,callbackFunction,isUserTriggerPlay){if(typeof callbackFunction=="function"){if(registerEventType=="VERBOSE"){callbackFunction.call(currentPlayerObj.curPlayer,eventName,eventData,eventType,isUserTriggerPlay);}else if(registerEventType!==eventType){callbackFunction.call(currentPlayerObj.curPlayer,eventName,eventData,eventType,isUserTriggerPlay);}else{callbackFunction.call(currentPlayerObj.curPlayer,eventName,eventData,eventType,isUserTriggerPlay);}}else{}},0,eventName,eventType,eventData,subscriberName,registerEventType,callbackFunction,isUserTriggerPlay);}setTimeout(function(){self.dispatchToGlobalEVM(name,type,data,isUserTriggerPlay);},0,name,type,data,isUserTriggerPlay)
if(name=="ready"){console.log("name was :: ready hide event Listener Attached");if(!SPL.isMobile){self.hideQualityClick();}}if(name=="ended"){self.RMhideQualityClick();}if(currentPlayerObj.needLoader==true&&name=="position"){posCounter++;console.log("needloader true");if(posCounter>=3){console.log("needloader false");currentPlayerObj.needLoader=false;currentPlayerObj.loader.hide();posCounter=0;}}}
self.dispatchToGlobalEVM=function(name,type,data){SPL.global.EventManager.onPlayerEvent(name,type,data,currentPlayerObj);}
function deleteThisSubscriber(subscriberList,subscriberName){var length=subscriberList.length;console.log("destroy length is :: "+length);for(var i=0;i<length;i++){length=subscriberList.length;console.log("destroy ith is :: "+i);try{if(subscriberList[i].subscriberName===subscriberName){subscriberList.splice(i,1);}}catch(e){console.log("");}}}self.events={ready:function(){self.dispatchEvent('ready',"VERBOSE");},manifest:function(e,d){self.dispatchEvent('manifest',"VERBOSE");}};var eventDictionary={"Events.MANIFEST_PARSED":{"name":"PLAY","type":"VERBOSE","data":"PlayBack 456"}};self.receiveEvent=function(name,type,data,command,sender){console.log('levm DO receiveEvent triggered with name ::'+name+",type::"+type+"command is ::"+command);if(command=="PAUSE"){var currentActiveElement=currentPlayerObj.getActiveElement();if(currentActiveElement.pluginName=="adManager"){console.log('tab currentActiveElement = adManager with index ::'+currentPlayerObj.playerIndex);var isAdPlaying=currentActiveElement.isPlaying();if(isAdPlaying){console.log('adplaypauseBC2 dev14 Do AdPlayer  paused send because isAdPlaying was ::'+isAdPlaying+",on "+self.name);currentActiveElement.pause();}else{currentActiveElement.pause();}}else{currentActiveElement.pause();}}else if(command=="MUTE"){console.log('levm command is :: '+command+" for playerIndex "+currentPlayerObj.playerIndex);var currentActiveElement=currentPlayerObj.getActiveElement();currentActiveElement.mute();}else if(command=="VOLUME"){console.log('levm command is :: '+command,data+" for playerIndex "+currentPlayerObj.playerIndex);var currentActiveElement=currentPlayerObj.getActiveElement();currentActiveElement.volume(data);}else if(command=="PLAY"){if(SPL.UA.isMac()){console.log("SPL.UA.isMac()");currentPlayerObj.loader.show();currentPlayerObj.needLoader=true;}var currentActiveElement=currentPlayerObj.getActiveElement();if(sender=="DOCUMENT_RESUME"&&currentPlayerObj.curPlayer.isLive()){currentPlayerObj.curPlayer.seekToLive();}currentActiveElement.play();}}
self.eventMapping=function(playerName,eventName){console.log('eventMapping called with playerName::'+playerName+" ,and eventName ::"+eventName);SplayerEventName=eventDictionary[eventName].name;SplayerEventType=eventDictionary[eventName].type;SplayerEventData=eventDictionary[eventName].data;self.dispatchEvent(SplayerEventName,SplayerEventType,SplayerEventData);}
self.QSclickEvent=function(e){var curControls=currentPlayerObj.controlsBaseObj;if(curControls==null||e.target==curControls.settingsMenuOuter||e.target==curControls.qualitySettings||e.target==curControls.settingsIconClick||curControls.settingsMenuOuter==null||curControls.settingsMenuOuter==undefined){return;}else{}if(e.clientX==0||e.clientY==0){console.log("System click");return;}var elem=curControls.settingsMenuOuter;var elemL=_elr(elem).left;var elemR=_elr(elem).right;var elemT=_elr(elem).top;var elemB=_elr(elem).bottom;var evtX=e.clientX;var evtY=e.clientY;var isInside=true;if(evtX>elemL&&evtX<elemR&&evtY>elemT&&evtY<elemB){isInside=true;}else{isInside=false;}if(!isInside&&curControls.isQualityOpen){setTimeout(function(){curControls&&curControls.hideQualityMenu&&curControls.hideQualityMenu();},0);}}
self.hideQualityClick=function(){console.log("added Event Listener on document");document.addEventListener('click',self.QSclickEvent,true);};self.RMhideQualityClick=function(){console.log("remove Event Listener on document");document.removeEventListener('click',self.QSclickEvent);};this.destroy=function(baseControllerCbfn){console.log("remove Event Listener");self.RMhideQualityClick();console.log('destroy called on Event Manager');baseControllerCbfn();}}